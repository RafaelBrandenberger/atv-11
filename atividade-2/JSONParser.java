
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JSONParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JSONParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JSONParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSONParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\004\000\002\004\005\000\002\005\003\000\002" +
    "\005\005\000\002\006\005\000\002\007\004\000\002\007" +
    "\005\000\002\010\003\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\020\004\011\005\005\006\006\007\013\010" +
    "\010\011\004\013\015\001\002\000\006\004\026\012\030" +
    "\001\002\000\012\002\ufffe\012\ufffe\014\ufffe\016\ufffe\001" +
    "\002\000\012\002\ufffb\012\ufffb\014\ufffb\016\ufffb\001\002" +
    "\000\004\002\000\001\002\000\012\002\ufff9\012\ufff9\014" +
    "\ufff9\016\ufff9\001\002\000\012\002\uffff\012\uffff\014\uffff" +
    "\016\uffff\001\002\000\012\002\ufffc\012\ufffc\014\ufffc\016" +
    "\ufffc\001\002\000\012\002\ufffa\012\ufffa\014\ufffa\016\ufffa" +
    "\001\002\000\012\002\ufffd\012\ufffd\014\ufffd\016\ufffd\001" +
    "\002\000\022\004\011\005\005\006\006\007\013\010\010" +
    "\011\004\013\015\014\022\001\002\000\004\002\017\001" +
    "\002\000\004\002\001\001\002\000\006\014\ufff1\016\ufff1" +
    "\001\002\000\006\014\024\016\023\001\002\000\012\002" +
    "\ufff3\012\ufff3\014\ufff3\016\ufff3\001\002\000\020\004\011" +
    "\005\005\006\006\007\013\010\010\011\004\013\015\001" +
    "\002\000\012\002\ufff2\012\ufff2\014\ufff2\016\ufff2\001\002" +
    "\000\006\014\ufff0\016\ufff0\001\002\000\004\015\035\001" +
    "\002\000\006\012\ufff6\016\ufff6\001\002\000\012\002\ufff8" +
    "\012\ufff8\014\ufff8\016\ufff8\001\002\000\006\012\033\016" +
    "\032\001\002\000\004\004\026\001\002\000\012\002\ufff7" +
    "\012\ufff7\014\ufff7\016\ufff7\001\002\000\006\012\ufff5\016" +
    "\ufff5\001\002\000\020\004\011\005\005\006\006\007\013" +
    "\010\010\011\004\013\015\001\002\000\006\012\ufff4\016" +
    "\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\012\002\015\003\006\004\013\007\011\001" +
    "\001\000\006\005\030\006\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\017\004\013\007\011\010\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\024\004" +
    "\013\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\035\004\013\007\011\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSONParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSONParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSONParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static void main(String[] args) throws Exception {
    Compilador compilador = new Compilador();
    compilador.compilar(args[0]);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JSONParser$actions {
  private final JSONParser parser;

  /** Constructor */
  CUP$JSONParser$actions(JSONParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JSONParser$do_action_part00000000(
    int                        CUP$JSONParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONParser$parser,
    java.util.Stack            CUP$JSONParser$stack,
    int                        CUP$JSONParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSONParser$result;

      /* select the action based on the action number */
      switch (CUP$JSONParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= json EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		RESULT = start_val;
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSONParser$parser.done_parsing();
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // json ::= valor 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 System.out.println("JSON v√°lido: " + v); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("json",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // valor ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // valor ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = n; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // valor ::= objeto 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // valor ::= array 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // valor ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // valor ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valor ::= NULL 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // objeto ::= LBRACE RBRACE 
            {
              Object RESULT =null;
		 RESULT = new java.util.LinkedHashMap<>(); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("objeto",2, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // objeto ::= LBRACE membros RBRACE 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 RESULT = m; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("objeto",2, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // membros ::= par 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 java.util.Map map = new java.util.LinkedHashMap<>(); map.put(((Object[])p)[0], ((Object[])p)[1]); RESULT = map; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("membros",3, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // membros ::= membros COMMA par 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 ((java.util.Map)m).put(((Object[])p)[0], ((Object[])p)[1]); RESULT = m; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("membros",3, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // par ::= STRING COLON valor 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = new Object[]{k, v}; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("par",4, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // array ::= LBRACKET RBRACKET 
            {
              Object RESULT =null;
		 RESULT = new java.util.ArrayList<>(); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("array",5, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // array ::= LBRACKET elementos RBRACKET 
            {
              Object RESULT =null;
		int elsleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 RESULT = els; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("array",5, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // elementos ::= valor 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 java.util.List list = new java.util.ArrayList<>(); list.add(v); RESULT = list; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("elementos",6, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elementos ::= elementos COMMA valor 
            {
              Object RESULT =null;
		int elsleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 ((java.util.List)els).add(v); RESULT = els; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("elementos",6, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JSONParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JSONParser$do_action(
    int                        CUP$JSONParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONParser$parser,
    java.util.Stack            CUP$JSONParser$stack,
    int                        CUP$JSONParser$top)
    throws java.lang.Exception
    {
              return CUP$JSONParser$do_action_part00000000(
                               CUP$JSONParser$act_num,
                               CUP$JSONParser$parser,
                               CUP$JSONParser$stack,
                               CUP$JSONParser$top);
    }
}

}
